spring.application.name=SpringCloudsSrvDemo

server.port=3111


#是否向注册服务器发送心跳信息，证明自己活着，默认true
eureka.client.register-with-eureka=true
#向注册服务器发送心跳信息周期，默认30S
eureka.instance.lease-renewal-interval-in-seconds=30

#是否从注册服务器获取集群中其他服务的注册信息，默认为true
#eureka.client.fetch-registry=false
#从注册服务器获取集群中其他服务的注册信息周期，默认30S
#eureka.client.registry-fetch-interval-seconds=60

eureka.client.serviceUrl.defaultZone=http://peer1111:1111/eureka/,http://peer1112:1112/eureka/,http://peer1113:1113/eureka/

#curl -X POST host:port/shutdown方式关闭服务
endpoints.shutdown.enabled=true

server.tomcat.uri-encoding=utf-8

logging.config=classpath:logback-spring.xml
logging.path=/Users/yuan/logs/SpringCloudsSrvDemo-2111

#-------------datasource--------------
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull
spring.datasource.username=root
spring.datasource.password=111111
#初始化大小
spring.datasource.initial-size=5
#最小
spring.datasource.min-idle=5
#最大
spring.datasource.max-active=20
#配置获取连接等待超时的时间
spring.datasource.max-wait=60000
#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.time-between-eviction-runs-millis=60000
#配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.min-evictable-idle-time-millis=300000
spring.datasource.validation-query=SELECT 1 FROM DUAL
spring.datasource.test-while-idle=true
spring.datasource.test-on-borrow=false
spring.datasource.test-on-return=false
#--------------end----------------------

#-------------mybatis--------------
mybatis.mapper-locations=classpath:mybatis/mapper/*.xml
mybatis.configLocation=classpath:mybatis.xml
#-------------end--------------

#-------------redis cluster-------------
#redis中心
#redis的服务器地址
redis.host=127.0.0.1
#redis的服务端口
redis.serverPort=6379
#密码
redis.password=
#最大空闲数
redis.maxIdle=100
#最大连接数
redis.maxActive=300
#最大建立连接等待时间
redis.maxWait=1000
#客户端超时时间单位是毫秒
redis.timeout=100000
redis.maxTotal=1000
redis.minIdle=8
#明是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个
redis.testOnBorrow=true
redis.maxRedirections=6

#cluster
redis.clusterNodes=127.0.0.1:7000,127.0.0.1:7001,127.0.0.1:7002,127.0.0.1:7003,127.0.0.1:7004,127.0.0.1:7005
#cluster
#--------------end----------------------







