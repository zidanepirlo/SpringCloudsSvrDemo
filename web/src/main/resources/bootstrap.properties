spring.application.name=SpringCloudsSrvDemo

server.port=3111


#是否向注册服务器发送心跳信息，证明自己活着，默认true
eureka.client.register-with-eureka=true
#向注册服务器发送心跳信息周期，默认30S
eureka.instance.lease-renewal-interval-in-seconds=30

#是否从注册服务器获取集群中其他服务的注册信息，默认为true
#eureka.client.fetch-registry=false
#从注册服务器获取集群中其他服务的注册信息周期，默认30S
#eureka.client.registry-fetch-interval-seconds=60

eureka.client.serviceUrl.defaultZone=http://peer1111:1111/eureka/,http://peer1112:1112/eureka/,http://peer1113:1113/eureka/

#curl -X POST host:port/shutdown方式关闭服务
endpoints.shutdown.enabled=true

#spring.boot.admin.url=http://localhost:8090

server.tomcat.uri-encoding=utf-8

logging.config=classpath:logback-spring.xml
logging.path=/Users/yuan/logs/SpringCloudsSrvDemo-2111

#-------------datasource--------------
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull
spring.datasource.username=root
spring.datasource.password=111111
#初始化大小
spring.datasource.initial-size=5
#最小
spring.datasource.min-idle=5
#最大
spring.datasource.max-active=20
#配置获取连接等待超时的时间
spring.datasource.max-wait=60000
#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.time-between-eviction-runs-millis=60000
#配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.min-evictable-idle-time-millis=300000
spring.datasource.validation-query=SELECT 1 FROM DUAL
spring.datasource.test-while-idle=true
spring.datasource.test-on-borrow=false
spring.datasource.test-on-return=false
#--------------end----------------------

#-------------mybatis--------------
mybatis.mapper-locations=classpath:mybatis/mapper/*.xml
mybatis.configLocation=classpath:mybatis.xml
#-------------end--------------

#-------------redis cluster-------------
spring.redis.cache.serverPort=7000,7001,7002,7003,7004,7005
#密码
spring.redis.cache.password=


#最大连接数, 默认20个
spring.redis.cache.maxTotal=20
##最大空闲连接数, 默认20个
spring.redis.cache.maxIdle=20
#最小空闲连接数, 默认0
spring.redis.cache.minIdle=8
#获取连接时的最大等待毫秒数(如果设置为阻塞时BlockWhenExhausted), 如果超时就抛异常, 小于零:阻塞不确定的时间, 默认 - 1
spring.redis.cache.maxWait=1000
#明是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个
spring.redis.cache.testOnBorrow=true
#在return给pool时，是否提前进行validate操作
spring.redis.cache.testOnReturn=false
#在空闲时检查有效性, 默认false
spring.redis.cache.testWhileIdle=true
#表示一个对象至少停留在idle状态的最短时间，然后才能被idle object evitor扫描并驱逐；这一项只有在timeBetweenEvictionRunsMillis大于0时才有意义
spring.redis.cache.minEvictableIdleTimeMillis=1800000
#表示idle object evitor每次扫描的最多的对象数
spring.redis.cache.numTestsPerEvictionRun=3
#在minEvictableIdleTimeMillis基础上，加入了至少minIdle个对象已经在pool里面了。
#如果为-1，evicted不会根据idle time驱逐任何对象。如果minEvictableIdleTimeMillis>0，
#则此项设置无意义，且只有在timeBetweenEvictionRunsMillis大于0时才有意义
spring.redis.cache.softMinEvictableIdleTimeMillis=1800000
#表示idle object evitor两次扫描之间要sleep的毫秒数
spring.redis.cache.timeBetweenEvictionRunsMillis=60000

#客户端超时时间单位是毫秒t
spring.redis.cache.timeout=2000
#最大重连次数
spring.redis.cache.maxRedirections=3

spring.redis.cache.clusterNodes=127.0.0.1:7000,127.0.0.1:7001,127.0.0.1:7002,127.0.0.1:7003,127.0.0.1:7004,127.0.0.1:7005

management.health.redis.enabled=false
#cluster
#-------------------end-----------------

#rocketmq
#rocketmq.producer.defProducer.enabled=true
#rocketmq.producer.defProducer.producerGroup=testTopicProducer
#rocketmq.producer.defProducer.namesrvAddr=127.0.0.1:9876
#rocketmq.producer.defProducer.instanceName=testTopicProducer
#rocketmq.producer.defProducer.topic=testTopicA
#rocketmq.producer.defProducer.tags=TagA

#rocketmq.consumer.defPushConsumer.enabled=true
#rocketmq.consumer.defPushConsumer.consumerGroup=testTopicConsumer
#rocketmq.consumer.defPushConsumer.namesrvAddr=127.0.0.1:9876
#rocketmq.consumer.defPushConsumer.instanceName=testTopicConsumerA
#rocketmq.consumer.defPushConsumer.topic=testTopicA
#rocketmq.consumer.defPushConsumer.tags=TagA
#rocketmq.consumer.defPushConsumer.consumeMessageBatchMaxSize=10
#rocketmq.consumer.defPushConsumer.maxReconsumeTimes=1
#rocketmq.consumer.defPushConsumer.messageModel=CLUSTERING
#rocketmq.consumer.defPushConsumer.listenerType=CONCURRENTLY
#rocketmq end












